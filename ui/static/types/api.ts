/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/nodes": {
    /**
     * List Node Metadata
     * @description Get metadata for all registered nodes.
     *
     * Returns information about node inputs, outputs, parameters, categories,
     * required API keys, and descriptions.
     */
    get: operations["list_nodes_nodes_get"];
  };
  "/api_keys": {
    /**
     * Get API Keys
     * @description Get all stored API keys.
     *
     * Returns a map of API key names to their values.
     * Note: This endpoint returns all keys for convenience, but in production
     * you may want to mask sensitive values.
     */
    get: operations["get_api_keys_api_keys_get"];
    /**
     * Set API Key
     * @description Store an API key in the vault.
     *
     * The key will be stored securely and made available to nodes that require it.
     * Keys are persisted to the .env file.
     */
    post: operations["set_api_key_api_keys_post"];
    /**
     * Delete API Key
     * @description Remove an API key from the vault.
     *
     * The key will be deleted from the .env file and will no longer be available
     * to nodes.
     */
    delete: operations["delete_api_key_api_keys_delete"];
  };
  "/style.css": {
    /** Serve Style */
    get: operations["serve_style_style_css_get"];
  };
  "/": {
    /** Read Root */
    get: operations["read_root__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * APIKeysResponse
     * @description Response model for getting all API keys.
     */
    APIKeysResponse: {
      /**
       * Keys
       * @description Map of API key names to values
       */
      keys: {
        [key: string]: string;
      };
    };
    /**
     * DeleteAPIKeyRequest
     * @description Request model for deleting an API key.
     */
    DeleteAPIKeyRequest: {
      /**
       * Key Name
       * @description Name of the API key to delete
       */
      key_name: string;
    };
    /**
     * DeleteAPIKeyResponse
     * @description Response model for deleting an API key.
     */
    DeleteAPIKeyResponse: {
      /**
       * Status
       * @default success
       * @constant
       */
      status?: "success";
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * NodesResponse
     * @description Response model for listing all node metadata.
     */
    NodesResponse: {
      /**
       * Nodes
       * @description Node metadata
       */
      nodes: {
        [key: string]: {
          [key: string]: unknown;
        };
      };
    };
    /**
     * SetAPIKeyRequest
     * @description Request model for setting an API key.
     */
    SetAPIKeyRequest: {
      /**
       * Key Name
       * @description Name of the API key
       */
      key_name: string;
      /**
       * Value
       * @description Value of the API key
       * @default
       */
      value?: string;
    };
    /**
     * SetAPIKeyResponse
     * @description Response model for setting an API key.
     */
    SetAPIKeyResponse: {
      /**
       * Status
       * @default success
       * @constant
       */
      status?: "success";
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List Node Metadata
   * @description Get metadata for all registered nodes.
   *
   * Returns information about node inputs, outputs, parameters, categories,
   * required API keys, and descriptions.
   */
  list_nodes_nodes_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NodesResponse"];
        };
      };
    };
  };
  /**
   * Get API Keys
   * @description Get all stored API keys.
   *
   * Returns a map of API key names to their values.
   * Note: This endpoint returns all keys for convenience, but in production
   * you may want to mask sensitive values.
   */
  get_api_keys_api_keys_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKeysResponse"];
        };
      };
    };
  };
  /**
   * Set API Key
   * @description Store an API key in the vault.
   *
   * The key will be stored securely and made available to nodes that require it.
   * Keys are persisted to the .env file.
   */
  set_api_key_api_keys_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetAPIKeyRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SetAPIKeyResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete API Key
   * @description Remove an API key from the vault.
   *
   * The key will be deleted from the .env file and will no longer be available
   * to nodes.
   */
  delete_api_key_api_keys_delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteAPIKeyRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteAPIKeyResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Serve Style */
  serve_style_style_css_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Read Root */
  read_root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
