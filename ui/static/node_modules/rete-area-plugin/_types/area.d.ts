import { Content } from './content';
import { Drag } from './drag';
import { Position } from './types';
import { Zoom, ZoomSource } from './zoom';
export type Transform = Position & {
    k: number;
};
export type TranslateEventParams = {
    previous: Transform;
    position: Position;
};
export type ZoomEventParams = {
    previous: Transform;
    zoom: number;
    source?: ZoomSource;
};
type Events = {
    zoomed: (params: ZoomEventParams) => Promise<unknown>;
    pointerDown: (position: Position, event: PointerEvent) => void;
    pointerMove: (position: Position, event: PointerEvent) => void;
    pointerUp: (position: Position, event: PointerEvent) => void;
    resize: (event: Event) => void;
    translated: (params: TranslateEventParams) => Promise<unknown>;
    reordered: (element: HTMLElement) => Promise<unknown>;
};
type Guards = {
    translate: (params: TranslateEventParams) => Promise<unknown>;
    zoom: (params: ZoomEventParams) => Promise<unknown>;
};
export declare class Area {
    private container;
    private events;
    private guards;
    transform: Transform;
    pointer: Position;
    content: Content;
    private zoomHandler;
    private dragHandler;
    constructor(container: HTMLElement, events: Events, guards: Guards);
    private update;
    /**
     * Drag handler. Destroy previous drag handler if exists.
     * @param drag drag handler
     * @example area.area.setDragHandler(null) // disable drag
     */
    setDragHandler(drag: Drag | null): void;
    /**
     * Set zoom handler. Destroy previous zoom handler if exists.
     * @param zoom zoom handler
     * @example area.area.setZoomHandler(null) // disable zoom
     */
    setZoomHandler(zoom: Zoom | null): void;
    setPointerFrom(event: MouseEvent): void;
    private pointerdown;
    private pointermove;
    private pointerup;
    private resize;
    private onTranslate;
    private onZoom;
    /**
     * Change position of the area
     * @param x desired x coordinate
     * @param y desired y coordinate
     * @returns true if the translation was successful, false otherwise
     * @emits translate
     * @emits translated
     */
    translate(x: number, y: number): Promise<boolean>;
    /**
     * Change zoom level of the area
     * @param zoom new zoom level
     * @param ox x coordinate of the origin of the zoom
     * @param oy y coordinate of the origin of the zoom
     * @param source source of the zoom
     * @returns true if the zoom was successful, false otherwise
     * @emits zoom
     * @emits zoomed
     */
    zoom(zoom: number, ox?: number, oy?: number, source?: ZoomSource): Promise<boolean>;
    destroy(): void;
}
export {};
//# sourceMappingURL=area.d.ts.map