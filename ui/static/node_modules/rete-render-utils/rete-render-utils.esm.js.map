{"version":3,"file":"rete-render-utils.esm.js","sources":["src/connection.ts","src/utils.ts","src/sockets-position/storage.ts","src/sockets-position/base-socket-position.ts","src/sockets-position/dom-socket-position.ts"],"sourcesContent":["import { Position } from './types'\n\n/**\n * Get classic SVG path for a connection between two points.\n * @param points Array of two points\n * @param curvature Curvature of the connection\n */\nexport function classicConnectionPath(points: [Position, Position], curvature: number) {\n  const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = points\n  const vertical = Math.abs(y1 - y2)\n  const hx1 = x1 + Math.max(vertical / 2, Math.abs(x2 - x1)) * curvature\n  const hx2 = x2 - Math.max(vertical / 2, Math.abs(x2 - x1)) * curvature\n\n  return `M ${x1} ${y1} C ${hx1} ${y1} ${hx2} ${y2} ${x2} ${y2}`\n}\n\n/**\n * Get loop SVG path for a connection between two points.\n * @param points Array of two points\n * @param curvature Curvature of the loop\n * @param size Size of the loop\n */\nexport function loopConnectionPath(points: [Position, Position], curvature: number, size: number) {\n  const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = points\n  const k = y2 > y1\n    ? 1\n    : -1\n  const scale = size + Math.abs(x1 - x2) / (size / 2)\n  const middleX = (x1 + x2) / 2\n  const middleY = y1 - k * scale\n  const vertical = (y2 - y1) * curvature\n\n  return `\n        M ${x1} ${y1}\n        C ${x1 + scale} ${y1}\n        ${x1 + scale} ${middleY - vertical}\n        ${middleX} ${middleY}\n        C ${x2 - scale} ${middleY + vertical}\n        ${x2 - scale} ${y2}\n        ${x2} ${y2}\n    `\n}\n","/* eslint-disable max-statements */\n\n/**\n * Calculates the center coordinates of a child element relative to a parent element.\n * @async\n * @param child The child element whose center coordinates need to be calculated.\n * @param parent The parent element relative to which the child element's center is calculated.\n * @returns Position of the child element's center\n * @throws Error if the child element has a null offsetParent.\n */\nexport async function getElementCenter(child: HTMLElement, parent: HTMLElement) {\n  while (!child.offsetParent) {\n    await new Promise(res => setTimeout(res, 0))\n  }\n\n  let x = child.offsetLeft\n  let y = child.offsetTop\n  let currentElement = child.offsetParent as HTMLElement | null\n\n  if (!currentElement) throw new Error('child has null offsetParent')\n\n  while (currentElement !== null && currentElement !== parent) {\n    x += currentElement.offsetLeft + currentElement.clientLeft\n    y += currentElement.offsetTop + currentElement.clientTop\n    currentElement = currentElement.offsetParent as HTMLElement | null\n  }\n  const width = child.offsetWidth\n  const height = child.offsetHeight\n\n  return {\n    x: x + width / 2,\n    y: y + height / 2\n  }\n}\nexport class EventEmitter<T> {\n  listeners = new Set<(data: T) => void>()\n\n  emit(data: T) {\n    this.listeners.forEach(listener => {\n      listener(data)\n    })\n  }\n\n  listen(handler: (data: T) => void) {\n    this.listeners.add(handler)\n\n    return () => {\n      this.listeners.delete(handler)\n    }\n  }\n}\n","import { Position, Side } from '../types'\n\ntype SocketPayload = {\n  element: HTMLElement\n  side: Side\n  key: string\n  nodeId: string\n  position: Position // relative to node\n}\n\nexport class SocketsPositionsStorage {\n  elements = new Map<HTMLElement, SocketPayload[]>()\n\n  getPosition(data: { nodeId: string, key: string, side: Side }) {\n    const list = Array.from(this.elements.values()).flat()\n    const found = list.filter(item => {\n      return item.side === data.side && item.nodeId === data.nodeId && item.key === data.key\n    })\n\n    // eslint-disable-next-line no-console\n    if (found.length > 1) console.warn([\n      'Found more than one element for socket with same key and side.',\n      'Probably it was not unmounted correctly'\n    ].join(' '), data)\n\n    return found.pop()?.position ?? null\n  }\n\n  add(data: SocketPayload) {\n    const existing = this.elements.get(data.element)\n\n    this.elements.set(data.element, existing\n      ? [\n        ...existing.filter(n => !(n.nodeId === data.nodeId && n.key === data.key && n.side === data.side)), data\n      ]\n      : [data])\n  }\n\n  remove(element: SocketPayload['element']) {\n    this.elements.delete(element)\n  }\n\n  snapshot() {\n    return Array.from(this.elements.values()).flat()\n  }\n}\n","import { BaseSchemes, NodeId, Scope } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectArea2DExtra, Position, Side } from '../types'\nimport { EventEmitter } from '../utils'\nimport { SocketsPositionsStorage } from './storage'\nimport { OnChange, SocketPositionWatcher } from './types'\n\ntype ListenerData = {\n  nodeId: string\n  side?: Side\n  key?: string\n}\n\n/**\n * Abstract class for socket position calculation. It can be extended to implement custom socket position calculation.\n * @abstract\n * @listens render\n * @listens rendered\n * @listens unmount\n * @listens nodetranslated\n * @listens noderesized\n */\nexport abstract class BaseSocketPosition<Schemes extends BaseSchemes, K> implements SocketPositionWatcher<Scope<never, [K]>> {\n  sockets = new SocketsPositionsStorage()\n  emitter = new EventEmitter<ListenerData>()\n  area: BaseAreaPlugin<Schemes, ExpectArea2DExtra<Schemes>> | null = null\n\n  /**\n   * The method needs to be implemented that calculates the position of the socket.\n   * @param nodeId Node ID\n   * @param side Side of the socket, 'input' or 'output'\n   * @param key Socket key\n   * @param element Socket element\n   */\n  abstract calculatePosition(nodeId: string, side: Side, key: string, element: HTMLElement): Promise<Position | null>\n\n  /**\n   * Attach the watcher to the area's child scope.\n   * @param scope Scope of the watcher that should be a child of `BaseAreaPlugin`\n   */\n  attach(scope: Scope<never, [K]>) {\n    if (this.area) return\n    if (!scope.hasParent()) return\n    this.area = scope.parentScope<BaseAreaPlugin<Schemes, ExpectArea2DExtra<Schemes>>>(BaseAreaPlugin)\n\n    // eslint-disable-next-line max-statements\n    this.area.addPipe(async context => {\n      if (context.type === 'rendered' && context.data.type === 'socket') {\n        const { nodeId, key, side, element } = context.data\n\n        const position = await this.calculatePosition(nodeId, side, key, element)\n\n        if (position) {\n          this.sockets.add({ nodeId, key, side, element, position })\n          this.emitter.emit({ nodeId, key, side })\n        }\n      } else if (context.type === 'unmount') {\n        this.sockets.remove(context.data.element)\n      } else if (context.type === 'nodetranslated') {\n        this.emitter.emit({ nodeId: context.data.id })\n      } else if (context.type === 'noderesized') {\n        const { id: nodeId } = context.data\n\n        await Promise.all(this.sockets.snapshot()\n          .filter(item => item.nodeId === context.data.id && item.side === 'output')\n          .map(async item => {\n            const { side, key, element } = item\n            const position = await this.calculatePosition(nodeId, side, key, element)\n\n            if (position) {\n              item.position = position\n            }\n          }))\n        this.emitter.emit({ nodeId })\n      } else if (context.type === 'render' && context.data.type === 'connection') {\n        const { source, target } = context.data.payload\n        const nodeId = source || target\n\n        this.emitter.emit({ nodeId })\n      }\n      return context\n    })\n  }\n\n  /**\n   * Listen to socket position changes. Usually used by rendering plugins to update the start/end of the connection.\n   * @internal\n   * @param nodeId Node ID\n   * @param side Side of the socket, 'input' or 'output'\n   * @param key Socket key\n   * @param change Callback function that is called when the socket position changes\n   */\n  listen(nodeId: NodeId, side: Side, key: string, change: OnChange) {\n    const unlisten = this.emitter.listen((data: ListenerData) => {\n      if (data.nodeId !== nodeId) return\n      if ((!data.key || data.side === side) && (!data.side || data.key === key)) {\n        const position = this.sockets.getPosition({ side, nodeId, key })\n\n        if (!position) return\n\n        const { x, y } = position\n        const nodeView = this.area?.nodeViews.get(nodeId)\n\n        if (nodeView) change({\n          x: x + nodeView.position.x,\n          y: y + nodeView.position.y\n        })\n      }\n    })\n\n    this.sockets.snapshot().forEach(data => {\n      if (data.nodeId === nodeId) this.emitter.emit(data)\n    })\n    return unlisten\n  }\n}\n","import { BaseSchemes } from 'rete'\n\nimport { Position, Side } from '../types'\nimport { getElementCenter } from '../utils'\nimport { BaseSocketPosition } from './base-socket-position'\n\n/**\n * Props for `DOMSocketPosition` class.\n */\nexport type Props = {\n  /**\n   * Allows to customize the position of the socket. By default, the position is shifted by 12px on the x-axis relative to the center of the socket.\n   * @param position Center position of the socket\n   * @param nodeId Node ID\n   * @param side Side of the socket, 'input' or 'output'\n   * @param key Socket key\n   * @returns Custom position of the socket\n   */\n  offset?: (position: Position, nodeId: string, side: Side, key: string) => Position\n}\n\n/**\n * Class for socket position calculation based on DOM elements. It uses `getElementCenter` function to calculate the position.\n */\nexport class DOMSocketPosition<Schemes extends BaseSchemes, K> extends BaseSocketPosition<Schemes, K> {\n  constructor(private props?: Props) {\n    super()\n  }\n\n  async calculatePosition(nodeId: string, side: Side, key: string, element: HTMLElement) {\n    const view = this.area?.nodeViews.get(nodeId)\n\n    if (!view?.element) return null\n    const position = await getElementCenter(element, view.element)\n\n    if (this.props?.offset) return this.props.offset(position, nodeId, side, key)\n\n    return {\n      x: position.x + 12 * (side === 'input'\n        ? -1\n        : 1),\n      y: position.y\n    }\n  }\n}\n\n/**\n * Wrapper function for `DOMSocketPosition` class.\n * @param props Props for `DOMSocketPosition` class\n */\nexport function getDOMSocketPosition<Schemes extends BaseSchemes, K>(props?: Props) {\n  return new DOMSocketPosition<Schemes, K>(props)\n}\n"],"names":["classicConnectionPath","points","curvature","_points","_slicedToArray","_points$","x1","x","y1","y","_points$2","x2","y2","vertical","Math","abs","hx1","max","hx2","concat","loopConnectionPath","size","_points2","_points2$","_points2$2","k","scale","middleX","middleY","getElementCenter","_x","_x2","_getElementCenter","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","child","parent","currentElement","width","height","wrap","_callee$","_context","prev","next","offsetParent","Promise","res","setTimeout","offsetLeft","offsetTop","Error","clientLeft","clientTop","offsetWidth","offsetHeight","abrupt","stop","EventEmitter","_classCallCheck","_defineProperty","Set","_createClass","key","value","emit","data","listeners","forEach","listener","listen","handler","_this","add","SocketsPositionsStorage","Map","getPosition","_found$pop$position","_found$pop","list","Array","from","elements","values","flat","found","filter","item","side","nodeId","length","console","warn","join","pop","position","existing","get","element","set","_toConsumableArray","n","remove","snapshot","BaseSocketPosition","attach","scope","area","hasParent","parentScope","BaseAreaPlugin","addPipe","_ref","_callee2","context","_context$data","_nodeId","_key","_side","_element","_nodeId2","_context$data$payload","source","target","_nodeId3","_callee2$","_context2","type","calculatePosition","sent","sockets","emitter","id","all","map","_ref2","payload","change","_this2","unlisten","_this2$area","nodeView","nodeViews","DOMSocketPosition","_BaseSocketPosition","props","_callSuper","_inherits","_calculatePosition","_this$area","_this$props","view","offset","_x3","_x4","getDOMSocketPosition"],"mappings":"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"}