{"version":3,"file":"rete.min.js","sources":["src/scope.ts","src/editor.ts","src/utils.ts","src/presets/classic.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n  AcceptPartialUnion, CanAssignSignal, GetAssignmentReferences, GetNonAssignableElements, Tail\n} from './utility-types'\n\nexport type { CanAssignSignal }\n\n/**\n * A middleware type that can modify the data\n * @typeParam T - The data type\n * @param data - The data to be modified\n * @returns The modified data or undefined\n * @example (data) => data + 1\n * @example (data) => undefined // will stop the execution\n * @internal\n */\nexport type Pipe<T> = (data: T) => Promise<undefined | T> | undefined | T\n\nexport type CanAssignEach<D extends any[], F extends any[]> = D extends [infer H1, ...infer Tail1]\n  ? (\n    F extends [infer H2, ...infer Tail2] ?\n      [CanAssignSignal<H1, H2>, ...CanAssignEach<Tail1, Tail2>]\n      : []\n  ) : []\n\nexport type ScopeAsParameter<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<[S['__scope']['produces'], ...S['__scope']['parents']], Current>[number] extends true\n  ? S\n  : 'Argument Scope does not provide expected signals'\n)\n\n/**\n * Validate the Scope signals and replace the parameter type with an error message if they are not assignable\n * @internal\n */\nexport type NestedScope<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<Current, S['__scope']['parents']>[number] extends true\n  ? S\n  : 'Parent signals do not satisfy the connected scope. Please use `.debug($ => $) for detailed assignment error'\n)\n\n/**\n * Provides 'debug' method to check the detailed assignment error message\n * @example .debug($ => $)\n * @internal\n */\nexport function useHelper<S extends Scope<any, any[]>, Signals>() {\n  type T1 = S['__scope']['parents'][number]\n  return {\n    debug<T extends GetNonAssignableElements<T1, Signals>>(_f: (p: GetAssignmentReferences<T, Signals>) => T) {\n      /* placeholder */\n    }\n  }\n}\n\n/**\n * A signal is a middleware chain that can be used to modify the data\n * @typeParam T - The data type\n * @internal\n */\nexport class Signal<T> {\n  pipes: Pipe<T>[] = []\n\n  addPipe(pipe: Pipe<T>) {\n    this.pipes.push(pipe)\n  }\n\n  async emit<Context extends T>(context: Context): Promise<Context | undefined> {\n    let current: Context | undefined = context\n\n    for (const pipe of this.pipes) {\n      current = await pipe(current) as Context\n\n      if (typeof current === 'undefined') return\n    }\n    return current\n  }\n}\n\ntype Type<T> = (new(...args: any[]) => T) | (abstract new (...args: any[]) => T)\n\n/**\n * Base class for all plugins and the core. Provides a signals mechanism to modify the data\n */\nexport class Scope<Produces, Parents extends unknown[] = []> {\n  signal = new Signal<AcceptPartialUnion<Produces | Parents[number]>>()\n  parent?: any // Parents['length'] extends 0 ? undefined : Scope<Parents[0], Tail<Parents>>\n  __scope!: {\n    produces: Produces\n    parents: Parents\n  }\n\n  constructor(public name: string) { }\n\n  addPipe(middleware: Pipe<Produces | Parents[number]>) {\n    this.signal.addPipe(middleware)\n  }\n\n  use<S extends Scope<any, any[]>>(scope: NestedScope<S, [Produces, ...Parents]>) {\n    if (!(scope instanceof Scope)) throw new Error('cannot use non-Scope instance')\n\n    scope.setParent(this)\n    this.addPipe(context => {\n      return scope.signal.emit(context)\n    })\n\n    return useHelper<S, Produces | Parents[number]>()\n  }\n\n  setParent(scope: Scope<Parents[0], Tail<Parents>>) {\n    this.parent = scope\n  }\n\n  emit<C extends Produces>(context: C): Promise<Extract<Produces, C> | undefined> {\n    return this.signal.emit(context) as Promise<Extract<Produces, C>>\n  }\n\n  hasParent(): boolean {\n    return Boolean(this.parent)\n  }\n\n  parentScope<T extends Parents[0], P extends Tail<Parents>>(): Scope<T, P>\n  parentScope<T>(type: Type<T>): T\n  parentScope<T>(type?: Type<T>): T {\n    if (!this.parent) throw new Error('cannot find parent')\n    if (type && this.parent instanceof type) return this.parent\n    if (type) throw new Error('actual parent is not instance of type')\n    return this.parent\n  }\n}\n","import { Scope } from './scope'\nimport { BaseSchemes } from './types'\n\n/**\n * Signal types produced by NodeEditor instance\n * @typeParam Scheme - The scheme type\n * @priority 10\n * @group Primary\n */\nexport type Root<Scheme extends BaseSchemes> =\n  | { type: 'nodecreate', data: Scheme['Node'] }\n  | { type: 'nodecreated', data: Scheme['Node'] }\n  | { type: 'noderemove', data: Scheme['Node'] }\n  | { type: 'noderemoved', data: Scheme['Node'] }\n  | { type: 'connectioncreate', data: Scheme['Connection'] }\n  | { type: 'connectioncreated', data: Scheme['Connection'] }\n  | { type: 'connectionremove', data: Scheme['Connection'] }\n  | { type: 'connectionremoved', data: Scheme['Connection'] }\n  | { type: 'clear' }\n  | { type: 'clearcancelled' }\n  | { type: 'cleared' }\n\n/**\n * The NodeEditor class is the entry class. It is used to create and manage nodes and connections.\n * @typeParam Scheme - The scheme type\n * @priority 7\n * @group Primary\n */\nexport class NodeEditor<Scheme extends BaseSchemes> extends Scope<Root<Scheme>> {\n  private nodes: Scheme['Node'][] = []\n  private connections: Scheme['Connection'][] = []\n\n  constructor() {\n    super('NodeEditor')\n  }\n\n  /**\n   * Get a node by id\n   * @param id - The node id\n   * @returns The node or undefined\n   */\n  public getNode(id: Scheme['Node']['id']) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  /**\n   * Get all nodes\n   * @returns Copy of array with nodes\n   */\n  public getNodes() {\n    return this.nodes.slice()\n  }\n\n  /**\n   * Get all connections\n   * @returns Copy of array with onnections\n   */\n  public getConnections() {\n    return this.connections.slice()\n  }\n\n  /**\n   * Get a connection by id\n   * @param id - The connection id\n   * @returns The connection or undefined\n   */\n  public getConnection(id: Scheme['Connection']['id']) {\n    return this.connections.find(connection => connection.id === id)\n  }\n\n  /**\n   * Add a node\n   * @param data - The node data\n   * @returns Whether the node was added\n   * @throws If the node has already been added\n   * @emits nodecreate\n   * @emits nodecreated\n   */\n  async addNode(data: Scheme['Node']) {\n    if (this.getNode(data.id)) throw new Error('node has already been added')\n\n    if (!await this.emit({ type: 'nodecreate', data })) return false\n\n    this.nodes.push(data)\n\n    await this.emit({ type: 'nodecreated', data })\n    return true\n  }\n\n  /**\n   * Add a connection\n   * @param data - The connection data\n   * @returns Whether the connection was added\n   * @throws If the connection has already been added\n   * @emits connectioncreate\n   * @emits connectioncreated\n   */\n  async addConnection(data: Scheme['Connection']) {\n    if (this.getConnection(data.id)) throw new Error('connection has already been added')\n\n    if (!await this.emit({ type: 'connectioncreate', data })) return false\n\n    this.connections.push(data)\n\n    await this.emit({ type: 'connectioncreated', data })\n    return true\n  }\n\n  /**\n   * Remove a node\n   * @param id - The node id\n   * @returns Whether the node was removed\n   * @throws If the node cannot be found\n   * @emits noderemove\n   * @emits noderemoved\n   */\n  async removeNode(id: Scheme['Node']['id']) {\n    const node = this.nodes.find(n => n.id === id)\n\n    if (!node) throw new Error('cannot find node')\n\n    if (!await this.emit({ type: 'noderemove', data: node })) return false\n\n    const index = this.nodes.indexOf(node)\n\n    this.nodes.splice(index, 1)\n\n    await this.emit({ type: 'noderemoved', data: node })\n    return true\n  }\n\n  /**\n   * Remove a connection\n   * @param id - The connection id\n   * @returns Whether the connection was removed\n   * @throws If the connection cannot be found\n   * @emits connectionremove\n   * @emits connectionremoved\n   */\n  async removeConnection(id: Scheme['Connection']['id']) {\n    const connection = this.connections.find(c => c.id === id)\n\n    if (!connection) throw new Error('cannot find connection')\n\n    if (!await this.emit({ type: 'connectionremove', data: connection })) return false\n\n    const index = this.connections.indexOf(connection)\n\n    this.connections.splice(index, 1)\n\n    await this.emit({ type: 'connectionremoved', data: connection })\n    return true\n  }\n\n  /**\n   * Clear all nodes and connections\n   * @returns Whether the editor was cleared\n   * @emits clear\n   * @emits clearcancelled\n   * @emits cleared\n   */\n  async clear() {\n    if (!await this.emit({ type: 'clear' })) {\n      await this.emit({ type: 'clearcancelled' })\n      return false\n    }\n\n    for (const connection of this.connections.slice()) await this.removeConnection(connection.id)\n    for (const node of this.nodes.slice()) await this.removeNode(node.id)\n\n    await this.emit({ type: 'cleared' })\n    return true\n  }\n}\n","const crypto = globalThis.crypto as (typeof globalThis.crypto | typeof import('node:crypto'))\n\n/**\n * @returns A unique id\n */\nexport function getUID(): string {\n  if ('randomBytes' in crypto) {\n    return crypto.randomBytes(8).toString('hex')\n  }\n\n  const bytes = crypto.getRandomValues(new Uint8Array(8))\n  const array = Array.from(bytes)\n  const hexPairs = array.map(b => b.toString(16).padStart(2, '0'))\n\n  return hexPairs.join('')\n}\n","/**\n * Contains classes for classic scheme such as Node, Input, Output, Control, Socket, Connection\n * @module\n * @group Primary\n */\n\nimport { ConnectionBase, NodeBase } from '../types'\nimport { getUID } from '../utils'\n\ntype PortId = string\n\n/**\n * The socket class\n * @priority 7\n */\nexport class Socket {\n  /**\n   * @constructor\n   * @param name Name of the socket\n   */\n  constructor(public name: string) {\n\n  }\n}\n\n/**\n * General port class\n */\nexport class Port<S extends Socket> {\n  /**\n   * Port id, unique string generated by `getUID` function\n   */\n  id: PortId\n  /**\n   * Port index, used for sorting ports. Default is `0`\n   */\n  index?: number\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the port\n   * @param multipleConnections Whether the output port can have multiple connections\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    this.id = getUID()\n  }\n}\n\n/**\n * The input port class\n * @priority 6\n */\nexport class Input<S extends Socket> extends Port<S> {\n  /**\n   * Control instance\n   */\n  control: Control | null = null\n  /**\n   * Whether the control is visible. Can be managed dynamically by extensions. Default is `true`\n   */\n  showControl = true\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the input port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `false`\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    super(socket, label, multipleConnections)\n  }\n\n  /**\n   * Add control to the input port\n   * @param control Control instance\n   */\n  addControl(control: Control) {\n    if (this.control) throw new Error('control already added for this input')\n    this.control = control\n  }\n\n  /**\n   * Remove control from the input port\n   */\n  removeControl() {\n    this.control = null\n  }\n}\n\n/**\n * The output port class\n * @priority 5\n */\nexport class Output<S extends Socket> extends Port<S> {\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the output port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `true`\n   */\n  constructor(socket: S, label?: string, multipleConnections?: boolean) {\n    super(socket, label, multipleConnections !== false)\n  }\n}\n\n/**\n * General control class\n * @priority 5\n */\nexport class Control {\n  /**\n   * Control id, unique string generated by `getUID` function\n   */\n  id: string\n  /**\n   * Control index, used for sorting controls. Default is `0`\n   */\n  index?: number\n\n  constructor() {\n    this.id = getUID()\n  }\n}\n\n/**\n * Input control options\n */\ntype InputControlOptions<N> = {\n  /** Whether the control is readonly. Default is `false` */\n  readonly?: boolean\n  /** Initial value of the control */\n  initial?: N\n  /** Callback function that is called when the control value changes */\n  change?: (value: N) => void\n}\n/**\n * The input control class\n * @example new InputControl('text', { readonly: true, initial: 'hello' })\n */\nexport class InputControl<T extends 'text' | 'number', N = T extends 'text' ? string : number> extends Control {\n  value?: N\n  readonly: boolean\n\n  /**\n   * @constructor\n   * @param type Type of the control: `text` or `number`\n   * @param options Control options\n   */\n  constructor(public type: T, public options?: InputControlOptions<N>) {\n    super()\n    this.id = getUID()\n    this.readonly = options?.readonly ?? false\n\n    if (typeof options?.initial !== 'undefined') this.value = options.initial\n  }\n\n  /**\n   * Set control value\n   * @param value Value to set\n   */\n  setValue(value?: N) {\n    this.value = value\n    if (this.options?.change) this.options.change(value!)\n  }\n}\n\n/**\n * The node class\n * @priority 10\n * @example new Node('math')\n */\nexport class Node<\n  Inputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Outputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Controls extends { [key in string]?: Control } = { [key in string]?: Control }\n> implements NodeBase {\n  /**\n   * Node id, unique string generated by `getUID` function\n   */\n  id: NodeBase['id']\n  /**\n   * Node inputs\n   */\n  inputs: { [key in keyof Inputs]?: Input<Exclude<Inputs[key], undefined>> } = {}\n  /**\n   * Node outputs\n   */\n  outputs: { [key in keyof Outputs]?: Output<Exclude<Outputs[key], undefined>> } = {}\n  /**\n   * Node controls\n   */\n  controls: Controls = {} as Controls\n  /**\n   * Whether the node is selected. Default is `false`\n   */\n  selected?: boolean\n\n  constructor(public label: string) {\n    this.id = getUID()\n  }\n\n  hasInput<K extends keyof Inputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.inputs, key)\n  }\n\n  addInput<K extends keyof Inputs>(key: K, input: Input<Exclude<Inputs[K], undefined>>) {\n    if (this.hasInput(key)) throw new Error(`input with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.inputs, key, { value: input, enumerable: true, configurable: true })\n  }\n\n  removeInput(key: keyof Inputs) {\n    delete this.inputs[key]\n  }\n\n  hasOutput<K extends keyof Outputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.outputs, key)\n  }\n\n  addOutput<K extends keyof Outputs>(key: K, output: Output<Exclude<Outputs[K], undefined>>) {\n    if (this.hasOutput(key)) throw new Error(`output with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.outputs, key, { value: output, enumerable: true, configurable: true })\n  }\n\n  removeOutput(key: keyof Outputs) {\n    delete this.outputs[key]\n  }\n\n  hasControl<K extends keyof Controls>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.controls, key)\n  }\n\n  addControl<K extends keyof Controls>(key: K, control: Controls[K]) {\n    if (this.hasControl(key)) throw new Error(`control with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.controls, key, { value: control, enumerable: true, configurable: true })\n  }\n\n  removeControl(key: keyof Controls) {\n    delete this.controls[key]\n  }\n}\n\n/**\n * The connection class\n * @priority 9\n */\nexport class Connection<\n  Source extends Node,\n  Target extends Node\n> implements ConnectionBase {\n  /**\n   * Connection id, unique string generated by `getUID` function\n   */\n  id: ConnectionBase['id']\n  /**\n   * Source node id\n   */\n  source: NodeBase['id']\n  /**\n   * Target node id\n   */\n  target: NodeBase['id']\n\n  /**\n   * @constructor\n   * @param source Source node instance\n   * @param sourceOutput Source node output key\n   * @param target Target node instance\n   * @param targetInput Target node input key\n   */\n  constructor(\n    source: Source,\n    public sourceOutput: keyof Source['outputs'],\n    target: Target,\n    public targetInput: keyof Target['inputs']\n  ) {\n    if (!source.outputs[sourceOutput as string]) {\n      throw new Error(`source node doesn't have output with a key ${String(sourceOutput)}`)\n    }\n    if (!target.inputs[targetInput as string]) {\n      throw new Error(`target node doesn't have input with a key ${String(targetInput)}`)\n    }\n\n    this.id = getUID()\n    this.source = source.id\n    this.target = target.id\n  }\n}\n"],"names":["Signal","_createClass","_classCallCheck","_defineProperty","key","value","pipe","this","pipes","push","_emit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","current","_iterator","_step","wrap","_context","prev","next","_createForOfIteratorHelper","s","n","done","sent","abrupt","t0","e","f","finish","stop","_x","apply","arguments","Scope","name","middleware","signal","addPipe","scope","Error","setParent","emit","debug","_f","parent","Boolean","type","NodeEditor","_Scope","_this","_callSuper","_inherits","id","nodes","find","node","slice","connections","connection","_addNode","data","getNode","_addConnection","_callee2","_context2","getConnection","_x2","_removeNode","_callee3","index","_context3","indexOf","splice","_x3","_removeConnection","_callee4","_context4","c","_x4","_clear","_callee5","_iterator2","_step2","_context5","removeConnection","removeNode","t1","crypto","globalThis","getUID","randomBytes","toString","bytes","getRandomValues","Uint8Array","Array","from","map","b","padStart","join","Socket","Port","socket","label","multipleConnections","Input","_Port","control","Output","_Port2","Control","InputControl","_Control","options","_options$readonly","_this2","readonly","initial","_this$options","change","Node","Object","prototype","hasOwnProperty","call","inputs","input","hasInput","concat","String","defineProperty","enumerable","configurable","outputs","output","hasOutput","controls","hasControl","Connection","source","sourceOutput","target","targetInput"],"mappings":"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"}