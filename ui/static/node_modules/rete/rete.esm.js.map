{"version":3,"file":"rete.esm.js","sources":["src/scope.ts","src/editor.ts","src/utils.ts","src/presets/classic.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n  AcceptPartialUnion, CanAssignSignal, GetAssignmentReferences, GetNonAssignableElements, Tail\n} from './utility-types'\n\nexport type { CanAssignSignal }\n\n/**\n * A middleware type that can modify the data\n * @typeParam T - The data type\n * @param data - The data to be modified\n * @returns The modified data or undefined\n * @example (data) => data + 1\n * @example (data) => undefined // will stop the execution\n * @internal\n */\nexport type Pipe<T> = (data: T) => Promise<undefined | T> | undefined | T\n\nexport type CanAssignEach<D extends any[], F extends any[]> = D extends [infer H1, ...infer Tail1]\n  ? (\n    F extends [infer H2, ...infer Tail2] ?\n      [CanAssignSignal<H1, H2>, ...CanAssignEach<Tail1, Tail2>]\n      : []\n  ) : []\n\nexport type ScopeAsParameter<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<[S['__scope']['produces'], ...S['__scope']['parents']], Current>[number] extends true\n  ? S\n  : 'Argument Scope does not provide expected signals'\n)\n\n/**\n * Validate the Scope signals and replace the parameter type with an error message if they are not assignable\n * @internal\n */\nexport type NestedScope<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<Current, S['__scope']['parents']>[number] extends true\n  ? S\n  : 'Parent signals do not satisfy the connected scope. Please use `.debug($ => $) for detailed assignment error'\n)\n\n/**\n * Provides 'debug' method to check the detailed assignment error message\n * @example .debug($ => $)\n * @internal\n */\nexport function useHelper<S extends Scope<any, any[]>, Signals>() {\n  type T1 = S['__scope']['parents'][number]\n  return {\n    debug<T extends GetNonAssignableElements<T1, Signals>>(_f: (p: GetAssignmentReferences<T, Signals>) => T) {\n      /* placeholder */\n    }\n  }\n}\n\n/**\n * A signal is a middleware chain that can be used to modify the data\n * @typeParam T - The data type\n * @internal\n */\nexport class Signal<T> {\n  pipes: Pipe<T>[] = []\n\n  addPipe(pipe: Pipe<T>) {\n    this.pipes.push(pipe)\n  }\n\n  async emit<Context extends T>(context: Context): Promise<Context | undefined> {\n    let current: Context | undefined = context\n\n    for (const pipe of this.pipes) {\n      current = await pipe(current) as Context\n\n      if (typeof current === 'undefined') return\n    }\n    return current\n  }\n}\n\ntype Type<T> = (new(...args: any[]) => T) | (abstract new (...args: any[]) => T)\n\n/**\n * Base class for all plugins and the core. Provides a signals mechanism to modify the data\n */\nexport class Scope<Produces, Parents extends unknown[] = []> {\n  signal = new Signal<AcceptPartialUnion<Produces | Parents[number]>>()\n  parent?: any // Parents['length'] extends 0 ? undefined : Scope<Parents[0], Tail<Parents>>\n  __scope!: {\n    produces: Produces\n    parents: Parents\n  }\n\n  constructor(public name: string) { }\n\n  addPipe(middleware: Pipe<Produces | Parents[number]>) {\n    this.signal.addPipe(middleware)\n  }\n\n  use<S extends Scope<any, any[]>>(scope: NestedScope<S, [Produces, ...Parents]>) {\n    if (!(scope instanceof Scope)) throw new Error('cannot use non-Scope instance')\n\n    scope.setParent(this)\n    this.addPipe(context => {\n      return scope.signal.emit(context)\n    })\n\n    return useHelper<S, Produces | Parents[number]>()\n  }\n\n  setParent(scope: Scope<Parents[0], Tail<Parents>>) {\n    this.parent = scope\n  }\n\n  emit<C extends Produces>(context: C): Promise<Extract<Produces, C> | undefined> {\n    return this.signal.emit(context) as Promise<Extract<Produces, C>>\n  }\n\n  hasParent(): boolean {\n    return Boolean(this.parent)\n  }\n\n  parentScope<T extends Parents[0], P extends Tail<Parents>>(): Scope<T, P>\n  parentScope<T>(type: Type<T>): T\n  parentScope<T>(type?: Type<T>): T {\n    if (!this.parent) throw new Error('cannot find parent')\n    if (type && this.parent instanceof type) return this.parent\n    if (type) throw new Error('actual parent is not instance of type')\n    return this.parent\n  }\n}\n","import { Scope } from './scope'\nimport { BaseSchemes } from './types'\n\n/**\n * Signal types produced by NodeEditor instance\n * @typeParam Scheme - The scheme type\n * @priority 10\n * @group Primary\n */\nexport type Root<Scheme extends BaseSchemes> =\n  | { type: 'nodecreate', data: Scheme['Node'] }\n  | { type: 'nodecreated', data: Scheme['Node'] }\n  | { type: 'noderemove', data: Scheme['Node'] }\n  | { type: 'noderemoved', data: Scheme['Node'] }\n  | { type: 'connectioncreate', data: Scheme['Connection'] }\n  | { type: 'connectioncreated', data: Scheme['Connection'] }\n  | { type: 'connectionremove', data: Scheme['Connection'] }\n  | { type: 'connectionremoved', data: Scheme['Connection'] }\n  | { type: 'clear' }\n  | { type: 'clearcancelled' }\n  | { type: 'cleared' }\n\n/**\n * The NodeEditor class is the entry class. It is used to create and manage nodes and connections.\n * @typeParam Scheme - The scheme type\n * @priority 7\n * @group Primary\n */\nexport class NodeEditor<Scheme extends BaseSchemes> extends Scope<Root<Scheme>> {\n  private nodes: Scheme['Node'][] = []\n  private connections: Scheme['Connection'][] = []\n\n  constructor() {\n    super('NodeEditor')\n  }\n\n  /**\n   * Get a node by id\n   * @param id - The node id\n   * @returns The node or undefined\n   */\n  public getNode(id: Scheme['Node']['id']) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  /**\n   * Get all nodes\n   * @returns Copy of array with nodes\n   */\n  public getNodes() {\n    return this.nodes.slice()\n  }\n\n  /**\n   * Get all connections\n   * @returns Copy of array with onnections\n   */\n  public getConnections() {\n    return this.connections.slice()\n  }\n\n  /**\n   * Get a connection by id\n   * @param id - The connection id\n   * @returns The connection or undefined\n   */\n  public getConnection(id: Scheme['Connection']['id']) {\n    return this.connections.find(connection => connection.id === id)\n  }\n\n  /**\n   * Add a node\n   * @param data - The node data\n   * @returns Whether the node was added\n   * @throws If the node has already been added\n   * @emits nodecreate\n   * @emits nodecreated\n   */\n  async addNode(data: Scheme['Node']) {\n    if (this.getNode(data.id)) throw new Error('node has already been added')\n\n    if (!await this.emit({ type: 'nodecreate', data })) return false\n\n    this.nodes.push(data)\n\n    await this.emit({ type: 'nodecreated', data })\n    return true\n  }\n\n  /**\n   * Add a connection\n   * @param data - The connection data\n   * @returns Whether the connection was added\n   * @throws If the connection has already been added\n   * @emits connectioncreate\n   * @emits connectioncreated\n   */\n  async addConnection(data: Scheme['Connection']) {\n    if (this.getConnection(data.id)) throw new Error('connection has already been added')\n\n    if (!await this.emit({ type: 'connectioncreate', data })) return false\n\n    this.connections.push(data)\n\n    await this.emit({ type: 'connectioncreated', data })\n    return true\n  }\n\n  /**\n   * Remove a node\n   * @param id - The node id\n   * @returns Whether the node was removed\n   * @throws If the node cannot be found\n   * @emits noderemove\n   * @emits noderemoved\n   */\n  async removeNode(id: Scheme['Node']['id']) {\n    const node = this.nodes.find(n => n.id === id)\n\n    if (!node) throw new Error('cannot find node')\n\n    if (!await this.emit({ type: 'noderemove', data: node })) return false\n\n    const index = this.nodes.indexOf(node)\n\n    this.nodes.splice(index, 1)\n\n    await this.emit({ type: 'noderemoved', data: node })\n    return true\n  }\n\n  /**\n   * Remove a connection\n   * @param id - The connection id\n   * @returns Whether the connection was removed\n   * @throws If the connection cannot be found\n   * @emits connectionremove\n   * @emits connectionremoved\n   */\n  async removeConnection(id: Scheme['Connection']['id']) {\n    const connection = this.connections.find(c => c.id === id)\n\n    if (!connection) throw new Error('cannot find connection')\n\n    if (!await this.emit({ type: 'connectionremove', data: connection })) return false\n\n    const index = this.connections.indexOf(connection)\n\n    this.connections.splice(index, 1)\n\n    await this.emit({ type: 'connectionremoved', data: connection })\n    return true\n  }\n\n  /**\n   * Clear all nodes and connections\n   * @returns Whether the editor was cleared\n   * @emits clear\n   * @emits clearcancelled\n   * @emits cleared\n   */\n  async clear() {\n    if (!await this.emit({ type: 'clear' })) {\n      await this.emit({ type: 'clearcancelled' })\n      return false\n    }\n\n    for (const connection of this.connections.slice()) await this.removeConnection(connection.id)\n    for (const node of this.nodes.slice()) await this.removeNode(node.id)\n\n    await this.emit({ type: 'cleared' })\n    return true\n  }\n}\n","const crypto = globalThis.crypto as (typeof globalThis.crypto | typeof import('node:crypto'))\n\n/**\n * @returns A unique id\n */\nexport function getUID(): string {\n  if ('randomBytes' in crypto) {\n    return crypto.randomBytes(8).toString('hex')\n  }\n\n  const bytes = crypto.getRandomValues(new Uint8Array(8))\n  const array = Array.from(bytes)\n  const hexPairs = array.map(b => b.toString(16).padStart(2, '0'))\n\n  return hexPairs.join('')\n}\n","/**\n * Contains classes for classic scheme such as Node, Input, Output, Control, Socket, Connection\n * @module\n * @group Primary\n */\n\nimport { ConnectionBase, NodeBase } from '../types'\nimport { getUID } from '../utils'\n\ntype PortId = string\n\n/**\n * The socket class\n * @priority 7\n */\nexport class Socket {\n  /**\n   * @constructor\n   * @param name Name of the socket\n   */\n  constructor(public name: string) {\n\n  }\n}\n\n/**\n * General port class\n */\nexport class Port<S extends Socket> {\n  /**\n   * Port id, unique string generated by `getUID` function\n   */\n  id: PortId\n  /**\n   * Port index, used for sorting ports. Default is `0`\n   */\n  index?: number\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the port\n   * @param multipleConnections Whether the output port can have multiple connections\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    this.id = getUID()\n  }\n}\n\n/**\n * The input port class\n * @priority 6\n */\nexport class Input<S extends Socket> extends Port<S> {\n  /**\n   * Control instance\n   */\n  control: Control | null = null\n  /**\n   * Whether the control is visible. Can be managed dynamically by extensions. Default is `true`\n   */\n  showControl = true\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the input port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `false`\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    super(socket, label, multipleConnections)\n  }\n\n  /**\n   * Add control to the input port\n   * @param control Control instance\n   */\n  addControl(control: Control) {\n    if (this.control) throw new Error('control already added for this input')\n    this.control = control\n  }\n\n  /**\n   * Remove control from the input port\n   */\n  removeControl() {\n    this.control = null\n  }\n}\n\n/**\n * The output port class\n * @priority 5\n */\nexport class Output<S extends Socket> extends Port<S> {\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the output port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `true`\n   */\n  constructor(socket: S, label?: string, multipleConnections?: boolean) {\n    super(socket, label, multipleConnections !== false)\n  }\n}\n\n/**\n * General control class\n * @priority 5\n */\nexport class Control {\n  /**\n   * Control id, unique string generated by `getUID` function\n   */\n  id: string\n  /**\n   * Control index, used for sorting controls. Default is `0`\n   */\n  index?: number\n\n  constructor() {\n    this.id = getUID()\n  }\n}\n\n/**\n * Input control options\n */\ntype InputControlOptions<N> = {\n  /** Whether the control is readonly. Default is `false` */\n  readonly?: boolean\n  /** Initial value of the control */\n  initial?: N\n  /** Callback function that is called when the control value changes */\n  change?: (value: N) => void\n}\n/**\n * The input control class\n * @example new InputControl('text', { readonly: true, initial: 'hello' })\n */\nexport class InputControl<T extends 'text' | 'number', N = T extends 'text' ? string : number> extends Control {\n  value?: N\n  readonly: boolean\n\n  /**\n   * @constructor\n   * @param type Type of the control: `text` or `number`\n   * @param options Control options\n   */\n  constructor(public type: T, public options?: InputControlOptions<N>) {\n    super()\n    this.id = getUID()\n    this.readonly = options?.readonly ?? false\n\n    if (typeof options?.initial !== 'undefined') this.value = options.initial\n  }\n\n  /**\n   * Set control value\n   * @param value Value to set\n   */\n  setValue(value?: N) {\n    this.value = value\n    if (this.options?.change) this.options.change(value!)\n  }\n}\n\n/**\n * The node class\n * @priority 10\n * @example new Node('math')\n */\nexport class Node<\n  Inputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Outputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Controls extends { [key in string]?: Control } = { [key in string]?: Control }\n> implements NodeBase {\n  /**\n   * Node id, unique string generated by `getUID` function\n   */\n  id: NodeBase['id']\n  /**\n   * Node inputs\n   */\n  inputs: { [key in keyof Inputs]?: Input<Exclude<Inputs[key], undefined>> } = {}\n  /**\n   * Node outputs\n   */\n  outputs: { [key in keyof Outputs]?: Output<Exclude<Outputs[key], undefined>> } = {}\n  /**\n   * Node controls\n   */\n  controls: Controls = {} as Controls\n  /**\n   * Whether the node is selected. Default is `false`\n   */\n  selected?: boolean\n\n  constructor(public label: string) {\n    this.id = getUID()\n  }\n\n  hasInput<K extends keyof Inputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.inputs, key)\n  }\n\n  addInput<K extends keyof Inputs>(key: K, input: Input<Exclude<Inputs[K], undefined>>) {\n    if (this.hasInput(key)) throw new Error(`input with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.inputs, key, { value: input, enumerable: true, configurable: true })\n  }\n\n  removeInput(key: keyof Inputs) {\n    delete this.inputs[key]\n  }\n\n  hasOutput<K extends keyof Outputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.outputs, key)\n  }\n\n  addOutput<K extends keyof Outputs>(key: K, output: Output<Exclude<Outputs[K], undefined>>) {\n    if (this.hasOutput(key)) throw new Error(`output with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.outputs, key, { value: output, enumerable: true, configurable: true })\n  }\n\n  removeOutput(key: keyof Outputs) {\n    delete this.outputs[key]\n  }\n\n  hasControl<K extends keyof Controls>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.controls, key)\n  }\n\n  addControl<K extends keyof Controls>(key: K, control: Controls[K]) {\n    if (this.hasControl(key)) throw new Error(`control with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.controls, key, { value: control, enumerable: true, configurable: true })\n  }\n\n  removeControl(key: keyof Controls) {\n    delete this.controls[key]\n  }\n}\n\n/**\n * The connection class\n * @priority 9\n */\nexport class Connection<\n  Source extends Node,\n  Target extends Node\n> implements ConnectionBase {\n  /**\n   * Connection id, unique string generated by `getUID` function\n   */\n  id: ConnectionBase['id']\n  /**\n   * Source node id\n   */\n  source: NodeBase['id']\n  /**\n   * Target node id\n   */\n  target: NodeBase['id']\n\n  /**\n   * @constructor\n   * @param source Source node instance\n   * @param sourceOutput Source node output key\n   * @param target Target node instance\n   * @param targetInput Target node input key\n   */\n  constructor(\n    source: Source,\n    public sourceOutput: keyof Source['outputs'],\n    target: Target,\n    public targetInput: keyof Target['inputs']\n  ) {\n    if (!source.outputs[sourceOutput as string]) {\n      throw new Error(`source node doesn't have output with a key ${String(sourceOutput)}`)\n    }\n    if (!target.inputs[targetInput as string]) {\n      throw new Error(`target node doesn't have input with a key ${String(targetInput)}`)\n    }\n\n    this.id = getUID()\n    this.source = source.id\n    this.target = target.id\n  }\n}\n"],"names":["useHelper","debug","_f","Signal","_classCallCheck","_defineProperty","_createClass","key","value","addPipe","pipe","pipes","push","_emit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","current","_iterator","_step","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","sent","abrupt","t0","e","f","finish","stop","emit","_x","apply","arguments","Scope","name","middleware","signal","use","scope","Error","setParent","parent","hasParent","Boolean","parentScope","type","NodeEditor","_Scope","_this","_callSuper","_inherits","getNode","id","nodes","find","node","getNodes","slice","getConnections","connections","getConnection","connection","_addNode","data","addNode","_addConnection","_callee2","_callee2$","_context2","addConnection","_x2","_removeNode","_callee3","index","_callee3$","_context3","indexOf","splice","removeNode","_x3","_removeConnection","_callee4","_callee4$","_context4","c","removeConnection","_x4","_clear","_callee5","_iterator2","_step2","_callee5$","_context5","t1","clear","crypto","globalThis","getUID","randomBytes","toString","bytes","getRandomValues","Uint8Array","array","Array","from","hexPairs","map","b","padStart","join","Socket","Port","socket","label","multipleConnections","Input","_Port","addControl","control","removeControl","Output","_Port2","Control","InputControl","_Control","options","_options$readonly","_this2","readonly","initial","setValue","_this$options","change","Node","hasInput","Object","prototype","hasOwnProperty","call","inputs","addInput","input","concat","String","defineProperty","enumerable","configurable","removeInput","hasOutput","outputs","addOutput","output","removeOutput","hasControl","controls","Connection","source","sourceOutput","target","targetInput"],"mappings":"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"}