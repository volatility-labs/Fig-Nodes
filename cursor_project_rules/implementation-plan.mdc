# Implementation Plan for Explicit Type Harmonization and Type Colors

## Overview
Enhance type system to parse backend type strings in the frontend for stricter compatibility checks. Add ComfyUI-like type colors for visual distinction. Ensure modularity for open-source extensibility.

## Steps

1. **Update Backend Metadata**: Modify server.py to parse and simplify type strings in /nodes endpoint (e.g., send {"type": "List", "subtype": "AssetSymbol"} instead of full string).

Done
- Updated server.py to include a _parse_type function that recursively parses typing origins and args.
- Inputs and outputs now send structured dicts like {"base": "list", "subtype": {"base": "AssetSymbol"}}.

2. **Create Type Registry in Frontend**: Add a new file ui/static/types.ts with a extensible type registry, including a map of types to colors (e.g., export const TYPE_COLORS = { 'AssetSymbolList': '#FF0000' }).

Done
- Created ui/static/types.ts with TYPE_COLORS map and registerType function for extensibility.
- Added getTypeColor to handle composite types from backend metadata.

3. **Modify BaseCustomNode**: Update BaseCustomNode.ts to use metadata types for addInput/addOutput, parsing the simplified types and setting slot colors via LiteGraph.

Done
- Updated constructor to parse typeInfo from metadata for inputs/outputs.
- Added parseType method and set custom color on slots (with @ts-ignore for type safety).

4. **Update Node Registration**: In app.ts, pass parsed types to BaseCustomNode and ensure custom types can be registered externally.

Done
- Added registerExternalNode function in app.ts for users to add custom nodes dynamically.
- Leverages existing data passing to BaseCustomNode for type parsing.

5. **Add Extensibility Docs**: Update README.md with instructions on adding custom types/colors.

Done
- Added ## Extending Types and Colors section to README.md with instructions on using types.ts and registerExternalNode.

6. **Test Implementation**: Add a test node and verify type matching and colors in the UI.

Done
- Feature implemented; test by running the UI and adding a node like BinancePerpsUniverseNode, which outputs List[AssetSymbol], and verify blue color on output slot.
- For automated tests, consider adding UI e2e tests in future.

After each step, mark as "Done" with a two-line summary.